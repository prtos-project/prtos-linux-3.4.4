#!/bin/sh

#Mount things needed by this script
busybox mount -t proc proc /proc
busybox mount -t sysfs sysfs /sys

#Disable kernel messages from popping onto the screen
echo 0 > /proc/sys/kernel/printk

#Clear the screen
busybox clear

#Create all the symlinks to /bin/busybox
busybox --install -s

#Create device nodes
mknod /dev/null c 1 3
mknod /dev/tty c 5 0
mdev -s

mkdir /dev/pts
mount -t devpts devpts /dev/pts

#Modprobe modules
grep '^[^#]' /etc/modules |
while read module args
do
    [ "$module" ] || continue
    modprobe $module $args || :
done
mdev -s

#Function for parsing command line options with "=" in them
# get_opt("init=/sbin/init") will return "/sbin/init"
get_opt() {
	echo "$@" | cut -d "=" -f 2
}

#Defaults
init="/sbin/init"
root="/dev/hda1"

#Process command line options
for i in $(cat /proc/cmdline); do
	case $i in
		root\=*)
			root=$(get_opt $i)
			;;
		rootdelay\=*)
			delay=$(get_opt $i)
			sleep $delay && mdev -s
			;;
		rootwait\=*)
			root=$(get_opt $i)
			while ! test -e $root; do mdev -s; sleep 1; done
			;;
		init\=*)
			init=$(get_opt $i)
			;;
	esac
done

#Mount the root device
mkdir /newroot
mount "${root}" /newroot

#Check if $init exists and is executable
if [[ -x "/newroot/${init}" ]] ; then
    source /prtos_init /newroot

    #Unmount all other mounts so that the ram used by
    #the initramfs can be cleared after switch_root
    umount /sys /proc

	#Copy included binaries
	cp /sbin/* /newroot/bin

    #Switch to the new root and execute init
    exec switch_root /newroot "${init}"
fi

#This will only be run if the exec above failed
exec /bin/busybox init $*
